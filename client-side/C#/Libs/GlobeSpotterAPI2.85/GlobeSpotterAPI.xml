<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlobeSpotterAPI</name>
    </assembly>
    <members>
        <member name="T:GlobeSpotterAPI.GlobeSpotterGUI">
            <summary>
            GlobeSpotterGUI
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.GlobeSpotterGUI.#ctor">
            <summary>
            Wraps the GlobeSpotter-object used for the API, whereupon it can be added to any GUI.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.GlobeSpotterGUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.GlobeSpotterGUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GlobeSpotterAPI.GlobeSpotterGUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.DrawingMode">
            <summary>
            The drawing mode used in the SetDrawingMode function
            </summary>
            <see cref="M:GlobeSpotterAPI.API.SetDrawingMode(GlobeSpotterAPI.DrawingMode)"/>
        </member>
        <member name="F:GlobeSpotterAPI.DrawingMode.POINT">
            <summary>
            Draw a point.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.DrawingMode.URL_IMAGE">
            <summary>
            Draw an image. The image url must be set.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.DrawingMode.CROSS_HAIR">
            <summary>
            Draw a cross hair image.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.ServiceUrlType">
            <summary>
            Type that represents any variable to be set in order for the API to initialize.
            Can be set with [B|M|F]API.SetApplicationParameter
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ServiceUrlType.URL_ADDRESS_SERVICE">
            <summary>
            The address-service url.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ServiceUrlType.URL_BASE">
            <summary>
            Set the base url for all services.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ServiceUrlType.URL_PANORAMA_SERVICE">
            <summary>
            One of the tile-service urls (altough only one needs to be set).
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ServiceUrlType.URL_RECORDING_LOCATION_SERVICE">
            <summary>
            The recording-location url.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ServiceUrlType.URL_SMART_CLICK_SERVICE">
            <summary>
            The smart click service url
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ServiceUrlType.URL_OBLIQUE_LOCATION_SERVICE">
            <summary>
            The oblique location service url
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ServiceUrlType.URL_OBLIQUE_TILING_SERVICE">
            <summary>
            The oblique tiling service url
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.MDIWindowingMode">
            <summary>
            The MDI Windowing Mode used in the SetMDIWindowingMode function
            </summary>
            <see cref="M:GlobeSpotterAPI.API.SetWindowingMode(GlobeSpotterAPI.MDIWindowingMode)"/>
        </member>
        <member name="F:GlobeSpotterAPI.MDIWindowingMode.HORIZONTAL">
            <summary>
            Tile windows.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.MDIWindowingMode.VERTICAL">
            <summary>
            Cascade windows
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.ViewerClickMode">
            <summary>
            Represents the type of data a mouse-click returns.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.GetViewerClickMode"/>
            <see cref="M:GlobeSpotterAPI.API.SetViewerClickMode(GlobeSpotterAPI.ViewerClickMode)"/>
        </member>
        <member name="F:GlobeSpotterAPI.ViewerClickMode.X_Y">
            <summary>
            Data returned as x,y-coords.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ViewerClickMode.H_V">
            <summary>
            Data returned as angles (horizontal, vertical).
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ViewerClickMode.VECTOR">
            <summary>
            Data returned as x,y,z-coords.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.MapClickMode">
            <summary>
            Represents the type of data a mouse-click returns.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.GetViewerClickMode"/>
            <see cref="M:GlobeSpotterAPI.API.SetViewerClickMode(GlobeSpotterAPI.ViewerClickMode)"/>
        </member>
        <member name="F:GlobeSpotterAPI.MapClickMode.WORLD_X_Y">
            <summary>
            Data returned as world (srs) x,y-coords.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.MapClickMode.X_Y">
            <summary>
            Data returned as relative pixel coordinates
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.ViewerStatusType">
            <summary>
            Indicates the status of a viewer.
            Please note that this status is only valid ON the moment it was retrieved from the client!
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ViewerStatusType.UNAVAILABLE">
            <summary>
            Viewer with this ID does not exist at this moment.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ViewerStatusType.ERROR">
            <summary>
            An error has occurred with this viewer (for example: failed to load image).
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ViewerStatusType.LOADING">
            <summary>
            The viewer is still loading.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.ViewerStatusType.READY">
            <summary>
            The viewer has had the visible section of the Cyclorama completely loaded.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.Permissions">
            <summary>
            Represents the permissions given to a user.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.Basic">
            <summary>
            Permission for using any of the API functions.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.MeasureHeight">
            <summary>
            Permission to use Height entities.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.AddHeightEntity(System.String,System.Double,GlobeSpotterAPI.Point3D)"/>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.MeasureArea">
            <summary>
            Permission to use Area entities.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.AddAreaEntity(System.String,System.Double,GlobeSpotterAPI.Point2D,GlobeSpotterAPI.Point2D,System.Double)"/>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.MeasureVolume">
            <summary>
            Permission to use Volume entities.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.AddVolumeEntity(System.String,System.Double,System.Collections.Generic.List{GlobeSpotterAPI.Point2D},System.Double)"/>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.MeasurePoint">
            <summary>
            Permission to use point entities.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.MeasureLine">
            <summary>
            Permission to use line entities.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.MeasurePolygon">
            <summary>
            Permission to use polygon entities.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.MeasureSmartClick">
            <summary>
            Permission to use smart click
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.AddLayerWFS">
            <summary>
            Permission to use add a WFS/GML layer.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.AddWFSLayer(System.String,System.String,System.String,System.String,System.Drawing.Color)"/>
            <see cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
            <see cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="P:GlobeSpotterAPI.Permissions.AddLayerWMS">
            <summary>
            Permission to use add a WMS layer (when available in API).
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.MapExtent">
            <summary>
            Represents the map extent as left,bottom,right,top
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MapExtent.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MapExtent.ToXMLString">
            <summary>
            Creates an XML-repressentation of this object.
            </summary>
            <returns>XML-string</returns>
        </member>
        <member name="P:GlobeSpotterAPI.MapExtent.left">
            <summary>
            xmin
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.MapExtent.bottom">
            <summary>
            ymin
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.MapExtent.right">
            <summary>
            xmax
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.MapExtent.top">
            <summary>
            ymax
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.RecordingLocation">
            <summary>
            Represents the location where (and date on which) an image was made.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.GetRecordingLocation(System.UInt32)"/>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.Id">
            <summary>
            The recording location id, which is equal to the image id.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.RecordedAt">
            <summary>
            The recording date and time as an ISO 8601 DateTime string.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.X">
            <summary>
            The x-coordinate of the recording location defined in the appropriate srs.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.Y">
            <summary>
            The y-coordiante of the recording location defined in the appropriate srs.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.Z">
            <summary>
            The z-coordinate of the recording location defined in the appropriate srs.
            <remarks>May be NaN if z is not available or not defined in the current coordinate system.</remarks>
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.SX">
            <summary>
            The x-element of the recording location standard deviations in meters.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.SY">
            <summary>
            The y-element of the recording location standard deviations in meters.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.SZ">
            <summary>
            The z-element of the recording location standard deviations in meters.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.Height">
            <summary>
            The height of the recording location.
            <remarks>Used if the z-coordinate is missing on account of a 2D srs, not used in 3D srs'.</remarks>
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.SHeight">
            <summary>
            The standard deviation of the height in meters.
            <remarks>Used if the z-coordinate is missing on account of a 2D srs, not used in 3D srs'.</remarks>
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.RecordingLocation.UsedInMeasurements">
            <summary>
            Determines if this RecordingLocation, can be used in measurements (if its sigmas are reliable).
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.ViewerParameters">
            <summary>
            The viewerParams object is expected to have any or all of the following properties: yaw, pitch, hFov, 
            dateFrom, and/or dateTo. Their respective values are expected to be in: degrees, degrees, degrees, 
            ISO 8601 DateTime string, and/or ISO 8601 DateTime string.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.ViewerParameters.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a direction of view within usable within any Cyclorama.
            </summary>
            <param name="yaw_">Yaw-angle in degrees.</param>
            <param name="pitch_">Pitch-angle in degrees</param>
            <param name="hFov_">Horizontal Field of View in degrees</param>
        </member>
        <member name="M:GlobeSpotterAPI.ViewerParameters.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a direction of view within usable within any Cyclorama.
            </summary>
            <param name="yaw_">Yaw-angle in degrees.</param>
            <param name="pitch_">Pitch-angle in degrees</param>
            <param name="hFov_">Horizontal Field of View in degrees</param>
            <param name="dateFrom_">The earliest date from which to look for available panoramas as an ISO 8601 DateTime string.</param>
        </member>
        <member name="M:GlobeSpotterAPI.ViewerParameters.#ctor(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Create a direction of view within usable within any Cyclorama.
            </summary>
            <param name="yaw_">Yaw-angle in degrees.</param>
            <param name="pitch_">Pitch-angle in degrees</param>
            <param name="hFov_">Horizontal Field of View in degrees</param>
            <param name="dateFrom_">The earliest date from which to look for available panoramas as an ISO 8601 DateTime string.</param>
            <param name="dateTo_">The furthest date to which to look for available panoramas as an ISO 8601 DateTime string.</param>
        </member>
        <member name="M:GlobeSpotterAPI.ViewerParameters.ToXMLString">
            <summary>
            Creates an XML-repressentation of this object.
            </summary>
            <returns>XML-string</returns>
        </member>
        <member name="P:GlobeSpotterAPI.ViewerParameters.Yaw">
            <summary>
            Yaw-angle in degrees.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.ViewerParameters.Pitch">
            <summary>
            Pitch-angle in degrees.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.ViewerParameters.HFov">
            <summary>
            Horizontal Field of View in degrees.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.ViewerParameters.DateFrom">
            <summary>
            The earliest date from which to look for available panoramas as an ISO 8601 DateTime string.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.ViewerParameters.DateTo">
            <summary>
            The furthest date to which to look for available panoramas as an ISO 8601 DateTime string.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.EntityData">
            <summary>
            Abstract superclass of all entities.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.ObservationMeasurementData">
            <summary>
            Data of an entity repressenting an observation measurement.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.ObservationMeasurementData.measurementObservation">
            <summary>
            The observation with x,y,z and direction
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.PointMeasurementData">
            <summary>
            Data of an entity repressenting a Point measurement.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.PointMeasurementData.measurementPoint">
            <summary>
            The point with x,y,z stdDev, tF and valid indication
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.LineMeasurementData">
            <summary>
            Data of an entity repressenting a Line measurement.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.LineMeasurementData.parseProperty(System.Xml.XmlNode,System.String)">
            <summary>
            Parse property data
            </summary>
            <param name="data">XML node with data</param>
            <param name="property">Property name</param>
            <returns>property data</returns>
        </member>
        <member name="M:GlobeSpotterAPI.LineMeasurementData.parsePropertyList(System.Xml.XmlNode,System.String)">
            <summary>
            Parse property data list
            </summary>
            <param name="data">XML node with data</param>
            <param name="property">Property name</param>
            <returns>list of property datas</returns>
        </member>
        <member name="M:GlobeSpotterAPI.LineMeasurementData.parseMeasurementPoints(System.Xml.XmlNode)">
            <summary>
            Parse measurement points
            </summary>
            <param name="data">XML node with measurement points</param>
            <returns>List of measurement points</returns>
        </member>
        <member name="P:GlobeSpotterAPI.LineMeasurementData.measurementPoints">
            <summary>
            The points with x,y,z stdDev, tF and valid indication
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.LineMeasurementData.totalDistance">
            <summary>
            The total distance of the lines
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.LineMeasurementData.totalDistanceStdDev">
            <summary>
            The total distance stdDev of the lines
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.LineMeasurementData.zDelta">
            <summary>
            The zDelta of the lines
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.LineMeasurementData.distances">
            <summary>
            The distance of the lines
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.LineMeasurementData.angles">
            <summary>
            The angles of the lines
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.LineMeasurementData.slopes">
            <summary>
            The slopes of the lines
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.SurfaceMeasurementData">
            <summary>
            Data of an entity repressenting a Line measurement.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.measurementPoints">
            <summary>
            The points with x,y,z stdDev, tF and valid indication
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.area">
            <summary>
            The area of the surface
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.areaStdDev">
            <summary>
            The area stdDev of the surface
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.totalDistance">
            <summary>
            The total distance of the surface
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.totalDistanceStdDev">
            <summary>
            The total distance stdDev of the surface
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.zDelta">
            <summary>
            The zDelta of the surface
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.distances">
            <summary>
            The distance of the surface lines
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.angles">
            <summary>
            The angles of the surface lines
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.SurfaceMeasurementData.slopes">
            <summary>
            The slopes of the surface lines
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.HeightEntityData">
            <summary>
            Data of an entity repressenting a height-measure.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.HeightEntityData.Height">
            <summary>
            The height of this entity.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.HeightEntityData.Position">
            <summary>
            The position of this entity.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.HeightEntityData.Stdv">
            <summary>
            Standard deviation for (x,y)-coords.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.AreaEntityData">
            <summary>
            Data of an entity repressenting an area-measure.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.AreaEntityData.Area">
            <summary>
            The area of this entity.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.AreaEntityData.PosList">
            <summary>
            The points defining this area.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.AreaEntityData.Width">
            <summary>
            The width of this area.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.AreaEntityData.Height">
            <summary>
            The height of this area.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.AreaEntityData.Stdv0">
            <summary>
            Standard deviation for (x,y)-coords of the first point.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.AreaEntityData.Stdv1">
            <summary>
            Standard deviation for (x,y)-coords of the second point.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.AreaEntityData.Z">
            <summary>
            The z-coord. of this area.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.VolumeEntityData">
            <summary>
            The data of an entity repressenting a volume.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.VolumeEntityData.PosList">
            <summary>
            The points defining this volume.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.VolumeEntityData.Perimeter">
            <summary>
            The perimeter of this volume.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.VolumeEntityData.Area">
            <summary>
            The area of this volume.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.VolumeEntityData.Volume">
            <summary>
            The volume of this entity.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.VolumeEntityData.Z">
            <summary>
            The z-coord. of this entity.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.VolumeEntityData.Height">
            <summary>
            The height of this volume.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.Point2D">
            <summary>
            A 2D point.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a 2-dimensional point.
            </summary>
            <param name="x">x-coord</param>
            <param name="y">y-coord</param>
        </member>
        <member name="M:GlobeSpotterAPI.Point2D.ToXMLString">
            <summary>
            Creates an XML-repressentation of this object.
            </summary>
            <returns>XML-string</returns>
        </member>
        <member name="P:GlobeSpotterAPI.Point2D.x">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Point2D.y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.Point3DStd">
            <summary>
            3D point with standard deviation information
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.Point3D">
            <summary>
            A 3D point.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a 3-dimensional point.
            </summary>
            <param name="x">x-coord</param>
            <param name="y">y-coord</param>
            <param name="z">z-coord</param>
        </member>
        <member name="M:GlobeSpotterAPI.Point3D.ToXMLString">
            <summary>
            Creates an XML-repressentation of this object.
            </summary>
            <returns>XML-string</returns>
        </member>
        <member name="P:GlobeSpotterAPI.Point3D.x">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Point3D.y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Point3D.z">
            <summary>
            z-coordinate
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.Point3DStd.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct Point3DStd with Std values and x,y,z values
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.Point3DStd.#ctor(GlobeSpotterAPI.Point3D,System.Double,System.Double,System.Double)">
            <summary>
            Construct Point3DStd with Std values and Point3D values
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.Point3DStd.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct Point3DStd with Std values without Point3D
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.Point3DStd.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Construct Point3DStd with Dicationary based std values
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.Point3DStd.updatePoint3D(GlobeSpotterAPI.Point3D)">
            <summary>
            Update x,z,y values with Point3D values
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Point3DStd.Std_x">
            <summary>
            Standard deviation of X
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Point3DStd.Std_y">
            <summary>
            Standard deviation of Y
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.Point3DStd.Std_z">
            <summary>
            Standard deviation of Z
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.DirectionObservation">
            <summary>
            a observatioin point with a direction
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.PointObservation">
            <summary>
            A point observation.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.PointObservation.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a 3-dimensional observation point.
            </summary>
            <param name="x">x-coord</param>
            <param name="y">y-coord</param>
            <param name="z">z-coord</param>
        </member>
        <member name="M:GlobeSpotterAPI.PointObservation.ToXMLString">
            <summary>
            Creates an XML-repressentation of this object.
            </summary>
            <returns>XML-string</returns>
        </member>
        <member name="P:GlobeSpotterAPI.PointObservation.x">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.PointObservation.y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.PointObservation.z">
            <summary>
            z-coordinate
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.DirectionObservation.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct direction observation with direction and x,y,z values
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.DirectionObservation.#ctor(GlobeSpotterAPI.PointObservation,System.Double,System.Double,System.Double)">
            <summary>
            Construct direction observation with direction values and Point observation values
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.DirectionObservation.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct direction observation with direction values without point observation values
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.DirectionObservation.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Construct direction observation with Dictionary based direction values
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.DirectionObservation.updatePointObservation(GlobeSpotterAPI.PointObservation)">
            <summary>
            Update x,z,y values with Point3D values
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.DirectionObservation.Dir_x">
            <summary>
            X direction
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.DirectionObservation.Dir_y">
            <summary>
            Y direction
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.DirectionObservation.Dir_z">
            <summary>
            Z direction
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.MeasurementObservation">
            <summary>
            Measurement Observation
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MeasurementObservation.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Construct MeasurementObservation
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MeasurementObservation.#ctor(GlobeSpotterAPI.PointObservation,GlobeSpotterAPI.DirectionObservation,System.String)">
            <summary>
            Construct MeasurementObservation
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.MeasurementObservation.imageId">
            <summary>
            the imageId of the observation
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.MeasurementObservationArray">
            <summary>
            Measurement Observation Array
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MeasurementObservationArray.#ctor">
            <summary>
            Construct Measurement observation array
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MeasurementObservationArray.#ctor(System.Collections.Generic.IEnumerable{GlobeSpotterAPI.MeasurementObservation})">
            <summary>
            Construct measurement observation array
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MeasurementObservationArray.AddMeasurementObservation(GlobeSpotterAPI.MeasurementObservation)">
            <summary>
            Add a measurement observation
            </summary>
            <param name="o">measurement observation</param>
        </member>
        <member name="T:GlobeSpotterAPI.MeasurementPoint">
            <summary>
            Measurement Point
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MeasurementPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,GlobeSpotterAPI.MeasurementObservationArray)">
            <summary>
            Construct MeasurementPoint 
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.MeasurementPoint.#ctor(GlobeSpotterAPI.Point3D,GlobeSpotterAPI.Point3DStd,System.Boolean,System.Boolean,GlobeSpotterAPI.MeasurementObservationArray)">
            <summary>
            Construct MeasurementPoint 
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.MeasurementPoint.validEstimate">
            <summary>
            Indicates if the point is a valid estimate.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.MeasurementPoint.reliableEstimate">
            <summary>
            Indicates if the point is reliable
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.MeasurementPoint.MeasurementObservationArray">
            <summary>
            The observation objects
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.OSMLayer">
            <summary>
            OSMLayer
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.OSMLayer.#ctor(System.String,GlobeSpotterAPI.MapExtent,System.Double,System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.OSMLayer.ToXMLString">
            <summary>
            Creates an XML-repressentation of this object.
            </summary>
            <returns>XML-string</returns>
        </member>
        <member name="P:GlobeSpotterAPI.OSMLayer.url">
            <summary>
            base url of osm tiles
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.OSMLayer.maxExtent">
            <summary>
            map extent
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.OSMLayer.maxResolution">
            <summary>
            max resolution
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.OSMLayer.maxZoomLevel">
            <summary>
            max zoomlevel
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.OSMLayer.featureZoomLevel">
            <summary>
            feature zoomlevel
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.WMSLayer">
            <summary>
            WMS layer
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.WMSLayer.ToXMLString">
            <summary>
            Creates an XML-repressentation of this object.
            </summary>
            <returns>XML-string</returns>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.url">
            <summary>
            Url of WMS service
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.layers">
            <summary>
            wms layers. Can be one or more. Multiple layers are comma seperated
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.version">
            <summary>
            WMS version. Can be 1.0.0, 1.1.0, etc
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.transparent">
            <summary>
            set to true if result should be transparent (png)
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.tiled">
            <summary>
            set to true if tiles are required
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.bgcolor">
            <summary>
            background color
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.maxExtent">
            <summary>
            max extent
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.maxResolution">
            <summary>
            max resolution
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.maxZoomLevel">
            <summary>
            max zoomlevel
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.WMSLayer.featureZoomLevel">
            <summary>
            feature zoomlevel
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.IAPIClient">
            <summary>
            API clients need to implement this (or AbstractAPIClient, which inherits from this).
            </summary>
            <remarks>
            Please note that there is only one viewer involved in the Basic API, so the viewerIDs will always be 0.
            </remarks>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnComponentReady">
            <summary>
            Indicates to the host that the component is ready for use. After this event the user is able to
            set various required application parameters to be able to use the components API functionality.
            </summary>
            <see cref="M:GlobeSpotterAPI.API.#ctor(GlobeSpotterAPI.InitType)"/>
            <see cref="M:GlobeSpotterAPI.API.#ctor(GlobeSpotterAPI.InitType,System.String)"/>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnAPIReady">
            <summary>
            Indicates to the host if the API is ready for use.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnAPIFailed">
            <summary>
            Indicates to the host that the API has failed initialization
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnOpenImageFailed(System.String)">
            <summary>
            Indicates to the host that the API was unable to open an image based on the input values of
            the openImage function. The parameters of the function reflect those entered in the openImage function.
            </summary>
            <param name="input">The input of the original request.</param>
            <see cref="M:GlobeSpotterAPI.API.OpenImage(System.String,GlobeSpotterAPI.ViewerParameters)"/>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnOpenImageResult(System.String,System.Boolean,System.String)">
            <summary>
            Indicates to the host the result of an open image call.
            </summary>
            <param name="input">The input of the original request.</param>
            <param name="opened">True if an image has been opened</param>
            <param name="imageId">The imageId that has been opened</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnOpenNearestImageResult(System.String,System.Boolean,System.String)">
            <summary>
            Indicates to the host the result of an open image call.
            </summary>
            <param name="input">The input of the original request.</param>
            <param name="opened">True if an image has been opened</param>
            <param name="imageId">The imageId that has been opened</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnImageChanged(System.UInt32)">
            <summary>
            Indicates to the host that the image was changed within a certain viewer. This event occurs after
            the openImage function has been called, after clicking on a recording location, etc.
            </summary>
            <param name="viewerID">The id of the viewer of which the image changed.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnImagePreviewCompleted(System.UInt32)">
            <summary>
            Indicates to the host that the preview of an image completed. The preview is a low resolution
            image that is used to quickly show a result and give the user the experience of progress.
            </summary>
            <param name="viewerID">The id of the viewer that loaded the image preview.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnImageSegmentLoaded(System.UInt32)">
            <summary>
            Indicates to the host that a segment of the high resolution image has been loaded.
            </summary>
            <param name="viewerID">The id of the viewer that loaded the image segment.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnImageCompleted(System.UInt32)">
            <summary>
            Indicates to the host that the entire high resolution image has been loaded.
            </summary>
            <param name="viewerID">The id of the viewer that loaded the entire image.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnImageFailed(System.UInt32)">
            <summary>
            Indicates to the host that any part of the image could not be completely loaded. This means 
            that the event is dispatched when either the preview or any segment fails to load.
            </summary>
            <param name="viewerID">The id of the viewer that failed to load the entire image.</param>
            <remarks>
            Can sometimes be fixed by reloading (for example, when the server is busy).
            </remarks>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnViewLoaded(System.UInt32)">
            <summary>
            Indicates to the host that all image parts of the current view have been completely loaded. 
            </summary>
            <param name="viewerID">The id of the viewer that loaded its entire view.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnViewChanged(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Indicates to the host that the current view is changed due to a change in zoom level and / or
            orientation.
            </summary>
            <param name="viewerID">The id of the viewer that has changed.</param>
            <param name="yaw">The horizontal orientation of the viewer in degrees.</param>
            <param name="pitch">The vertical orientation of the viewer in degrees.</param>
            <param name="hFov">The horizontal view angle of the viewer in degrees.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnViewClicked(System.UInt32,System.Double[])">
            <summary>
            Indicates to the host that the user clicked on a viewer. The parameters of the function depend on viewer click mode.
            </summary>
            <param name="viewerID">The id of the clicked viewer.</param>
            <param name="mouseCoords">The coords. of the click <seealso cref="T:GlobeSpotterAPI.ViewerClickMode"/>. </param>
            <seealso cref="M:GlobeSpotterAPI.API.GetViewerClickMode"/>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMarkerClicked(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Indicates to the host that a marker from the drawing layer was clicked. Returns the position of
            the clicked marker similar to the "vector" viewer click mode. 
            </summary>
            <param name="viewerID">The id of the viewer in which the marker was clicked.</param>
            <param name="drawingID">The id of the marker that was clicked.</param>
            <param name="markerCoords">Direction of the marker in 3D.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnEntityDataChanged(System.Int32,GlobeSpotterAPI.EntityData)">
            <summary>
            Indicates to the host that the data of an entity is updated.
            </summary>
            <param name="entityID">The id of the entity of which its data is updated.</param>
            <param name="data">The data of the updated entity.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnEntityFocusChanged(System.Int32)">
            <summary>
            Indicates to the host that the focus of an entity has changed.
            </summary>
            <param name="entityID">The ID of the entity that obtained focus. The id equals -1 if no entity has focus.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnFocusPointChanged(System.Double,System.Double,System.Double)">
            <summary>
            Indicates to the host that the focusPoint has been updated in FocusMode
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnFeatureClicked(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Indicates to the host that a feature has been clicked. Feature data is supplied.
            </summary>
            <param name="feature"></param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnViewerAdded(System.UInt32)">
            <summary>
            Indicates to the host that a viewer was added to the MDI canvas.
            </summary>
            <param name="viewerID">The id of the viewer that was added.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnViewerRemoved(System.UInt32)">
            <summary>
            Indicates to the host that a viewer was removed from the MDI canvas.
            </summary>
            <param name="viewerID">The id of the viewer that was removed.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnViewerActive(System.UInt32)">
            <summary>
            Indicates to the host that a viewer-window was selected.
            </summary>
            <param name="viewerID">The ID of the viewer.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnViewerInactive(System.UInt32)">
            <summary>
            Indicates to the host that a viewer-window was minimized.
            </summary>
            <param name="viewerID">The ID of the viewer.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMaxViewers(System.UInt32)">
            <summary>
            Indicates to the host that the max amount of viewers has been reached
            </summary>
            <param name="maxViewers">The ID of the viewer.</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementCreated(System.Int32,System.String)">
            <summary>
            Indicates to the host that a new measurement has been created.
            A measurement can only be edited until it is considered finished 
            (by calling CloseMeasurement) after which it is locked. 
            After creating a new measurement, it can be interacted with using 
            so called observations. An observation is a 2D point in an image 
            that represents the projection the 3D point that is to be measured. 
            Observations are added by clicking on an image, and can be manipulated 
            by clicking on another location in the same image, or by dragging it 
            around using mouse interaction. A measurement can only be created and 
            edited through user interaction. After a measurement is finalized, 
            it is locked from edition. Measurements are considered entities and 
            can be deleted using the removeEntity function.
            </summary>
            <param name="entityID">The id of the measurement (entity)  that has been created</param>
            <param name="entityType">The type of measurement created</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementClosed(System.Int32,GlobeSpotterAPI.EntityData)">
            <summary>
            Indicates to the host that the created measurement has been finalized. 
            After a measurement is finalized it is locked from edition. 
            Measurements are considered entities and can be deleted using the removeEntity function.
            </summary>
            <param name="entityID">A reference to the measurement (entity)</param>
            <param name="data">Measurement data of which the contents depends on the entity type</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementOpened(System.Int32,GlobeSpotterAPI.EntityData)">
            <summary>
            Indicates that an already exisiting has been opened for editing/adding observations
            </summary>
            <param name="entityID">A reference to the measurement (entity)</param>
            <param name="data">Measurement data of which the contents depends on the entity type</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementCanceled(System.Int32)">
            <summary>
            Indicates to the host that the user canceled the last active measurement. 
            A measurement is canceled  if the the function CancelMeasurement is called
            or if it was removed using removeEntity function.
            </summary>
            <param name="entityID">A reference to the measurement (entity)</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementModeChanged(System.Boolean)">
            <summary>
            Indicates to the host that the measuremode has been enabled/disabled. This happens
            when a new measurement is started or when a existing (opened) measurement is cancelled or closed.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointAdded(System.Int32,System.Int32)">
            <summary>
            Indicates to the host that an point has been added to an existing measurement        
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointUpdated(System.Int32,System.Int32)">
            <summary>
            Indicates to the host that an existing point from a measurement has been updated
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointRemoved(System.Int32,System.Int32)">
            <summary>
            Indicates to the host that an point has been removed  from an existing measurement        
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointOpened(System.Int32,System.Int32)">
            <summary>
            Indicates to the host that an existing point has been opened from an existing measurement        
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointClosed(System.Int32,System.Int32)">
            <summary>
            Indicates to the host that an existing point has been closed
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointObservationAdded(System.Int32,System.Int32,System.String,System.Drawing.Bitmap)">
            <summary>
            Indicates to the host that an point has been added to an existing measurement        
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
            <param name="imageID">The ID of the image in which the observation was done</param>
            <param name="match">A reference to the point that has been added</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointObservationUpdated(System.Int32,System.Int32,System.String)">
            <summary>
            Indicates to the host that an point has been added to an existing measurement        
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
            <param name="imageID">The ID of the image in which the observation was done</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointObservationRemoved(System.Int32,System.Int32,System.String)">
            <summary>
            Indicates to the host that an point has been added to an existing measurement        
            </summary>
            <param name="entityID">A reference to the measurement to which the observation was added</param>
            <param name="pointID">A reference to the point that has been added</param>
            <param name="imageID">The ID of the image in which the observation was done</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnDividerPositionChanged(System.Double)">
            <summary>
            Indicates to the host that the divider position between map and cyclorama has changed     
            </summary>
            <param name="position">new position of divider</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMapClicked(GlobeSpotterAPI.Point2D)">
            <summary>
            Indicates to the host that the map was clicked
            </summary>
            <param name="point">Point2D</param>      
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMapExtentChanged(GlobeSpotterAPI.MapExtent,GlobeSpotterAPI.Point2D,System.UInt32)">
            <summary>
            Indicates to the host that an observation was updated for the active measurement
            </summary>
            <param name="extent">object with left, bottom, top and right values for current extent</param>
            <param name="mapCenter">object with x,y of center of map</param>
            <param name="zoomLevel">current zoomlevel of map</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnAutoCompleteResult(System.String,System.String[])">
            <summary>
            Gives the request-string with the list of matches
            </summary>
            <param name="request">the request string</param>
            <param name="results">the list of matches</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMapInitialized">
            <summary>
            The map is initialized
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnShowLocationRequested(System.UInt32,GlobeSpotterAPI.Point3D)">
            <summary>
            Indicates for a center-on-map request
            </summary>
            <param name="viewerId">The id of the viewer that do the request</param>
            <param name="point3D">object with x,y,z of center of map</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnDetailImagesVisibilityChanged(System.Boolean)">
            <summary>
            Indicates that the detail images visibility changed
            </summary>
            <param name="value">true = detail images are visible</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementHeightLevelChanged(System.Int32,System.Double)">
            <summary>
            Height level of measurement changed
            </summary>
            <param name="entityID">entityId of the measurement</param>
            <param name="level">the level height</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMeasurementPointHeightLevelChanged(System.Int32,System.Int32,System.Double)">
            <summary>
            Height level of point measurement changed
            </summary>
            <param name="entityID">entityId of the measurement</param>
            <param name="pointID">pointId of the measurement</param>
            <param name="level">the level height</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMapBrightnessChanged(System.Double)">
            <summary>
            Brightness of the map
            </summary>
            <param name="value">the value of the brightness</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnMapContrastChanged(System.Double)">
            <summary>
            Contrast of the map
            </summary>
            <param name="value">the value of the contrast</param>
        </member>
        <member name="M:GlobeSpotterAPI.IAPIClient.OnObliqueImageChanged">
            <summary>
            Oblique image changed
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.AbstractAPIClient">
            <summary>
            If the user does not want to implement the whole Basic API, this class can be implemented instead of IAPIClient.
            Only the absolute nescessities need to be implemented by the user, other methods can be overridden as needed.
            </summary>
            <seealso cref="T:GlobeSpotterAPI.IAPIClient"/>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnComponentReady">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnAPIReady">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnAPIReady"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnAPIFailed">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnAPIFailed"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnImageChanged(System.UInt32)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnImageChanged(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnImagePreviewCompleted(System.UInt32)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnImagePreviewCompleted(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnImageSegmentLoaded(System.UInt32)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnImageSegmentLoaded(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnImageCompleted(System.UInt32)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnImageCompleted(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnViewLoaded(System.UInt32)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnViewLoaded(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnViewChanged(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnViewChanged(System.UInt32,System.Double,System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnViewClicked(System.UInt32,System.Double[])">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnViewClicked(System.UInt32,System.Double[])"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMarkerClicked(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnMarkerClicked(System.UInt32,System.UInt32,System.Double[])"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnEntityDataChanged(System.Int32,GlobeSpotterAPI.EntityData)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnEntityDataChanged(System.Int32,GlobeSpotterAPI.EntityData)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnEntityFocusChanged(System.Int32)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnEntityFocusChanged(System.Int32)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnFocusPointChanged(System.Double,System.Double,System.Double)">
            <summary>
            . <see cref="M:GlobeSpotterAPI.IAPIClient.OnFocusPointChanged(System.Double,System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnFeatureClicked(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnViewerAdded(System.UInt32)">
            <summary>
            </summary>
            <param name="viewerID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnViewerRemoved(System.UInt32)">
            <summary>
            </summary>
            <param name="viewerID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnViewerActive(System.UInt32)">
            <summary>
            </summary>
            <param name="viewerID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnViewerInactive(System.UInt32)">
            <summary>
            </summary>
            <param name="viewerID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementCreated(System.Int32,System.String)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementClosed(System.Int32,GlobeSpotterAPI.EntityData)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="data"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementOpened(System.Int32,GlobeSpotterAPI.EntityData)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="data"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementCanceled(System.Int32)">
            <summary>
            </summary>
            <param name="entityID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementModeChanged(System.Boolean)">
            <summary>
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointAdded(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointUpdated(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointRemoved(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>        
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointOpened(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointClosed(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointObservationAdded(System.Int32,System.Int32,System.String,System.Drawing.Bitmap)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
            <param name="imageID"></param>
            <param name="match"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointObservationUpdated(System.Int32,System.Int32,System.String)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
            <param name="imageID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointObservationRemoved(System.Int32,System.Int32,System.String)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
            <param name="imageID"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMaxViewers(System.UInt32)">
            <summary>
            </summary>
            <param name="maxViewers"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMapExtentChanged(GlobeSpotterAPI.MapExtent,GlobeSpotterAPI.Point2D,System.UInt32)">
            <summary>
            </summary>
            <param name="extent"></param>
            <param name="mapCenter"></param>
            <param name="zoomLevel"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMapClicked(GlobeSpotterAPI.Point2D)">
            <summary>
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnDividerPositionChanged(System.Double)">
            <summary>
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnOpenImageFailed(System.String)">
            <summary>
            Shows a message-box with info on the error that has occurred.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnOpenImageResult(System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnOpenNearestImageResult(System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnImageFailed(System.UInt32)">
            <summary>
            Shows a message-box with info on the error that has occurred.
            <see cref="M:GlobeSpotterAPI.IAPIClient.OnImageFailed(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnAutoCompleteResult(System.String,System.String[])">
            <summary>
            </summary>
            <param name="request"></param>
            <param name="results"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMapInitialized">
            <summary>
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnShowLocationRequested(System.UInt32,GlobeSpotterAPI.Point3D)">
            <summary>
            </summary>
            <param name="viewerId"></param>
            <param name="point3D"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnDetailImagesVisibilityChanged(System.Boolean)">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementHeightLevelChanged(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="level"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMeasurementPointHeightLevelChanged(System.Int32,System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="entityID"></param>
            <param name="pointID"></param>
            <param name="level"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMapBrightnessChanged(System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnMapContrastChanged(System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GlobeSpotterAPI.AbstractAPIClient.OnObliqueImageChanged">
            <summary>
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.InitType">
            <summary>
            Specifies if the file is inited from local or from remote (server).
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.InitType.LOCAL">
            <summary>
            File is initialized from local.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.InitType.REMOTE">
            <summary>
            File is initialized from remote (server).
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.GlobeSpotterAPIException">
            <summary>
            Thrown when the API itself generates an exception.
            </summary>
        </member>
        <member name="P:GlobeSpotterAPI.GlobeSpotterAPIException.xml">
            <summary>
            The xml returned by the API with information on the exception.
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.WarningSeverity">
            <summary>
            The severity of a message. <see cref="T:GlobeSpotterAPI.IWarningHandler"/>
            </summary>    
        </member>
        <member name="F:GlobeSpotterAPI.WarningSeverity.INFO">
            <summary>
            The message is information.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.WarningSeverity.WARNING">
            <summary>
            The message signifies a warning.
            </summary>
        </member>
        <member name="F:GlobeSpotterAPI.WarningSeverity.ERROR">
            <summary>
            The message signifies a serious error!
            </summary>
        </member>
        <member name="T:GlobeSpotterAPI.IWarningHandler">
            <summary>
            Implement a handler for warnings of serious issues, for example, the flash player does not start for some reason.
            </summary>
            <remarks>
            Note that this only applies to errors that otherwise result in a messagebox if  the handler is null.
            </remarks>
        </member>
        <member name="M:GlobeSpotterAPI.IWarningHandler.OnMessage(System.String,GlobeSpotterAPI.WarningSeverity)">
            <summary>
            Method called if a serious error occurs in the DLL-wrapper for the GlobeSpotter API.
            </summary>
            <remarks>
            Note that this only applies to errors that otherwise result in a messagebox if  the handler is null.
            </remarks>
            <param name="message">The message.</param>
            <param name="severity">The severity of the warning and underlying issue.</param>
        </member>
        <member name="T:GlobeSpotterAPI.API">
            <summary>
            Wraps all the methods of the GlobeSpotter  API.
            Enables the use of one (non-windowed) viewer.
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetWarningHandler(GlobeSpotterAPI.IWarningHandler)">
            <summary>
            Sets the handler for warnings of serious issues, for example, the flash player does not start for some reason.
            Is the handler is 'null'(the default) the user will just be shown a messagebox.
            </summary>
            <remarks>
            Note that this only applies to errors that otherwise result in a messagebox if  the handler is null.
            It is recommended that if this method is to be used al all, it's called before creation of any [B|M|F]API object.
            </remarks>
            <seealso cref="T:GlobeSpotterAPI.IWarningHandler"/>
            <seealso cref="T:GlobeSpotterAPI.WarningSeverity"/>
            <param name="handler">The class that will handle serious warnings.</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.#ctor(GlobeSpotterAPI.InitType)">
            <summary>
            Initialize the Basic API. (Default names are used.)
            </summary>
            <remarks>Default for local is 'viewer_api.swf'.</remarks>
            <param name="ftype">Whether the file is local or remote.</param>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.#ctor(GlobeSpotterAPI.InitType,System.String)">
            <summary>
            Initialize the Basic API from an .swf file. (The user specifies the name.)
            </summary>
            <param name="ftype">Whether the file is local or remote.</param>
            <param name="swfName">The filename of the .swf (it can be either relative or absolute path).</param>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.Initialize(GlobeSpotterAPI.IAPIClient)">
            <summary>
            Starts the GlobeSpotter component (API-version). (GlobeSpotter may begin firing events.)
            </summary>
            <param name="client">A listener/client that implements methods that may be called from GlobeSpotter.</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.Initialize(System.Collections.Generic.ICollection{GlobeSpotterAPI.IAPIClient})">
            <summary>
            Starts the GlobeSpotter component (API-version). (GlobeSpotter may begin firing events.)
            </summary>
            <param name="clients">All listners/clients in any sort of collection.</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetXMLLog">
            <summary>
            Returns the content of the internal GlobeSpotter logging
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetServiceURL(System.String,GlobeSpotterAPI.ServiceUrlType)">
            <summary>
            Set the value of an service url. This can be used when the default service urls should be changed
            </summary>
            <param name="value">The value for the url to be set.</param>
            <param name="type">The type of the url to be set. </param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="T:GlobeSpotterAPI.ServiceUrlType"/>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnAPIReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAPIKey(System.String)">
            <summary>
            Set the required API key
            </summary>
            <param name="value">The API key to be set.</param>        
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnAPIReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAdressLanguageCode(System.String)">
            <summary>
            Set the required address language code
            </summary>
            <param name="value">The API key to be set.</param>        
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnAPIReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAdressLanguageCode">
            <summary>
            returns the current address language code
            </summary>
            <returns>address language code</returns>      
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnAPIReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerIDs">
            <summary>
            Returns list with id's of open viewers
            </summary>
            <returns>address language code</returns>      
        </member>
        <member name="M:GlobeSpotterAPI.API.SetSrsNameViewer(System.String)">
            <summary>
            Set the required srs name for the cyclorama viewers. Recording locations will be requested with this srs
            </summary>
            <param name="value">The srs name to be set.</param>        
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnAPIReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetSrsNameAddress(System.String)">
            <summary>
            Set the required srs name for the address service. Address locations will be requested with this srs
            </summary>
            <param name="value">The srs name to be set.</param>        
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnAPIReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMajorVersion">
            <summary>
            The major release version indicates global changes in the API.
            </summary>
            <returns>The major version-'number' as a string.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMinorVersion">
            <summary>
            The minor release version, in combination with the major release version, is used to specify bugs.
            </summary>
            <returns>The minor version-'number' as a string.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the SWF was not loaded.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAPIReadyState">
            <summary>
            Returns whether or not the API can be used for general use. 
            </summary>
            <returns>The ready state of the API.</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetUserNamePassword(System.String,System.String)">
            <summary>
            Set user credentials.
            Important: Please note that the only moment to set the user-name and accompanying password occurs in IAPICLient.OnComponentReady (or AbstractAPIClient.OnComponentReady).
            </summary>
            <param name="userName">The name or ID of the user.</param>
            <param name="password">The password needed for the specified name or ID.</param>
            <exception cref="T:System.InvalidOperationException">When this function is called outside the scope of OnComponentReady (in IAPIClient of AbstractAPIClient).</exception>
            <seealso cref="M:GlobeSpotterAPI.IAPIClient.OnComponentReady"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetPermissions">
            <summary>
            Returns the permissions of the user based on his/her credentials.
            </summary>
            <returns>Permissions of the user based on his/her credentials</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerClickMode">
            <summary>
            Gets the viewer click mode. 
            </summary>
            <returns>The click mode.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <see cref="T:GlobeSpotterAPI.ViewerClickMode"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerClickMode(GlobeSpotterAPI.ViewerClickMode)">
            <summary>
            Sets the viewer click mode.
            </summary>
            <remarks>
            The click mode defines the behaviour of the viewer clicked event.The
            following modes are defined:
            <ul>
            <li>
            X_Y<br/>
            The image coordinates within the current view. The center coordinate of the top left pixel is 
            defined to be (0.5, 0.5). The viewer clicked event returns x and y values. 
            </li>
            <li>
            H_V<br/>
            Horizontal and vertical spherical coordinates within the entire image (cyclorama). The center of
            the image is defined to be (0.0, 0.0). The viewer clicked event returns H and V values.
            </li>
            <li>
            VECTOR<br/>
            Unit vector x, y and z coordinates that define the location within the image. The center of the
            image is defined to be (0.0, 1.0, 0.0). The viewer clicked event returns x, y and z values.
            </li>
            </ul>
            </remarks>
            <param name="mode">The click mode.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <see cref="T:GlobeSpotterAPI.ViewerClickMode"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.OpenNearestImage(System.String,System.Int32)">
            <summary>
            This function attempts to open an image via acoordinate or address. 
            </summary>
            <param name="input">The input-string</param>
            <param name="maxLocations">Maximum number of windows to open</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">Wraps a GlobeSpotter exception indicating either an ArgumentError or a MAX_VIEWERS_ERROR.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.OpenImage(System.String,GlobeSpotterAPI.ViewerParameters)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.OpenImage(System.String,GlobeSpotterAPI.ViewerParameters)">
            <summary>
            This function attempts to open an image via image id
            </summary>       
            <param name="input">The input-string</param>
            <param name="viewerParams">The parameters with which to open the image.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">Wraps a GlobeSpotter exception indicating either an ArgumentError or a MAX_VIEWERS_ERROR.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.OpenNearestImage(System.String,System.Int32)"/>        
        </member>
        <member name="M:GlobeSpotterAPI.API.OpenImage(System.String)">
            <summary>
            This function attempts to open an image via image id
            </summary>       
            <param name="input">The input-string</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">Wraps a GlobeSpotter exception indicating either an ArgumentError or a MAX_VIEWERS_ERROR.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.OpenNearestImage(System.String,System.Int32)"/>        
        </member>
        <member name="M:GlobeSpotterAPI.API.GetImageID(System.UInt32)">
            <summary>
            Gets the image id of a viewer.
            </summary>
            <param name="viewerID">The viewer id of which to obtain its meta data.</param>
            <returns>The id of the image or null if the viewer does not have an open image.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments was null.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetYaw(System.UInt32)">
            <summary>
            Gets the horizontal orientation of a view in degrees.
            </summary>
            <param name="viewerID">The viewer id of which to obtain its meta data.</param>
            <returns>The horizontal orientation of the view in degrees.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetYaw(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetYaw(System.UInt32,System.Double)">
            <summary>
            Sets the horizontal orientation of a view in degrees.
            </summary>
            <param name="viewerID">The viewer id of which to set its meta data.</param>
            <param name="value">The horizontal angle of the view.</param>
            <seealso cref="M:GlobeSpotterAPI.API.GetYaw(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetPitch(System.UInt32)">
            <summary>
            Gets the vertical orientation of a view in degrees.
            </summary>
            <param name="viewerID">The viewer id of which to obtain its meta data.</param>
            <returns>The vertical orientation of the view in degrees.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetPitch(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetPitch(System.UInt32,System.Double)">
            <summary>
            Sets the vertical orientation of a view in degrees.
            </summary>
            <param name="viewerID">The viewer id of which to set its meta data.</param>
            <param name="value">The vertical angle of the view.</param>
            <seealso cref="M:GlobeSpotterAPI.API.GetPitch(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>        
        </member>
        <member name="M:GlobeSpotterAPI.API.GetHFov(System.UInt32)">
            <summary>
            Gets the horizontal field of view in degrees.
            </summary>
            <param name="viewerID">The viewer id of which to obtain its meta data.</param>
            <returns>The horizontal field of view in degrees.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetHFov(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetHFov(System.UInt32,System.Double)">
            <summary>
            Sets the horizontal field of view in degrees.
            </summary>
            <param name="viewerID">The viewer id of which to set its meta data.</param>
            <param name="value">The horizontal field of view in degrees.</param>
            <seealso cref="M:GlobeSpotterAPI.API.GetHFov(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetRecordingLocation(System.UInt32)">
            <summary>
            Gets the recording location meta data of an opened image by viewer id.
            </summary>
            <param name="viewerID">The viewer id of which to obtain its meta data.</param>
            <returns>The meta data.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <see cref="T:GlobeSpotterAPI.RecordingLocation"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.LookAtCoordinate(System.UInt32,System.Double,System.Double)">
            <summary>
            Centers the view direction of a viewer to a terrestrial coordinate as defined by the spatial reference system used within the API.
            </summary>
            <param name="viewerID"> The viewer of which to change its view direction.</param>
            <param name="x">The x-element of a terrestrial coordinate.</param>
            <param name="y">The y-element of a terrestrial coordinate.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.LookAtCoordinate(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Centers the view direction of a viewer to a terrestrial coordinate as defined by the spatial reference system used within the API.
            </summary>
            <param name="viewerID"> The viewer of which to change its view direction.</param>
            <param name="x">The x-element of a terrestrial coordinate.</param>
            <param name="y">The y-element of a terrestrial coordinate.</param>
            <param name="z">The z-element of a terrestrial coordinate.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetRecordingLocationsVisible(System.Boolean)">
            <summary>
            Toggle the visibility of the recording locations layer
            </summary>
            <param name="visible">Set to true if recording locations layer should be visible</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetRecordingLocationsVisible">
            <summary>
            Returns true if the recording locations layer is visible
            </summary>
            <returns>True if recording locations layer is visible.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetDrawingLayerVisible(System.Boolean)">
            <summary>
            Toggle the visibility of the drawing layer
            </summary>
            <param name="visible">Set to true if drawing layer should be visible</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetDrawingLayerVisible">
            <summary>
            Returns true if the drawing layer is visible
            </summary>
            <returns>True if drawing layer is visible.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasureLayerVisible(System.Boolean)">
            <summary>
            Toggle the visibility of the measure layer
            </summary>
            <param name="visible">Set to true if measure layer should be visible</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasureLayerVisible">
            <summary>
            Returns true if the measure layer is visible
            </summary>
            <returns>True if measure layer is visible.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAddressLocationsVisible(System.Boolean)">
            <summary>
            Toggle the visibility of the address locations layer
            </summary>
            <param name="visible">Set to true if address locations layer should be visible</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAddressLocationsVisible">
            <summary>
            Returns true if the address locations layer is visible
            </summary>
            <returns>True if address locations layer is visible.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddWFSLayer(System.String,System.String,System.String,System.String,System.Drawing.Color)">
            <summary>
            Add a new WFS layer to all viewers with color specified
            </summary>
            <remarks>
            Due to security restrictions in the flash player, it is sometimes required to route data via the CycloMeda proxy
            server. This restriction occurs when the domain on which the WFS service is host does not explicitly allow a flash
            client from another domain to use its data.
            </remarks>
            <param name="name">Name of the layer.</param>
            <param name="url">URL of the WFS service used to draw feature data.</param>
            <param name="typeName">Name(s) of the features to be drawn on the layer. Multiple types are comma seperated.</param>
            <param name="wfsVersion">The WFS version to be used.</param>
            <param name="color">The color used for drawing the vector data. A 24-bits RGB value is expected.</param>
            <returns>A reference to the added layer.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Indicates that one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddWFSLayer(System.String,System.String,System.String,System.String,System.Object,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Add a new WFS layer to all viewers.
            </summary>
            <remarks>
            Due to security restrictions in the flash player, it is sometimes required to route data via the CycloMeda proxy
            server. This restriction occurs when the domain on which the WFS service is host does not explicitly allow a flash
            client from another domain to use its data.
            </remarks>
            <param name="name">Name of the layer.</param>
            <param name="url">URL of the WFS service used to draw feature data.</param>
            <param name="typeName">Name(s) of the features to be drawn on the layer. Multiple types are comma seperated.</param>
            <param name="wfsVersion">The WFS version to be used.</param>
            <param name="style">The style specified as Object. string type and Color type allowed here</param>
            <param name="showInViewer">Show in viewer if true.</param>
            <param name="showInMap">Show in map if true.</param>
            <param name="minZoomLevel">Minimum zoomlevel to show layer on map</param>
            <param name="useProxy">Uses a proxy if true.</param>
            <returns>A reference to the added layer.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Indicates that one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddWFSLayer(System.String,System.String,System.String,System.String)">
            <summary>
            Add a new WFS layer to all viewers with default style (blue)
            </summary>
            <remarks>
            Due to security restrictions in the flash player, it is sometimes required to route data via the CycloMeda proxy
            server. This restriction occurs when the domain on which the WFS service is host does not explicitly allow a flash
            client from another domain to use its data.
            </remarks>
            <param name="name">Name of the layer.</param>
            <param name="url">URL of the WFS service used to draw feature data.</param>
            <param name="typeName">Name(s) of the features to be drawn on the layer. Multiple types are comma seperated.</param>
            <param name="wfsVersion">The WFS version to be used.</param>
            <returns>A reference to the added layer.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Indicates that one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddWFSLayer(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a new WFS layer to all viewers with specified SLD string
            </summary>
            <remarks>
            Due to security restrictions in the flash player, it is sometimes required to route data via the CycloMeda proxy
            server. This restriction occurs when the domain on which the WFS service is host does not explicitly allow a flash
            client from another domain to use its data.
            </remarks>
            <param name="name">Name of the layer.</param>
            <param name="url">URL of the WFS service used to draw feature data.</param>
            <param name="typeName">Name(s) of the features to be drawn on the layer. Multiple types are comma seperated.</param>
            <param name="wfsVersion">The WFS version to be used.</param>
            <param name="sld">The color used for drawing the vector data. A 24-bits RGB value is expected.</param>
            <returns>A reference to the added layer.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.ArgumentNullException">Indicates that one of the arguments was null.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.ApplyStyle(System.UInt32,System.Drawing.Color)">
            <summary>
            Applies a color to an existing layer
            </summary>
            <param name="layer">Reference to a layer (layer id)</param>
            <param name="color">Color used when drawing the layer.</param>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ApplyStyle(System.UInt32,System.String)">
            <summary>
            Applies a SLD string to an existing layer
            </summary>
            <param name="layer">Reference to a layer (layer id)</param>
            <param name="SLD">XML based SLD in text format</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)">
            <summary>
            Removes a layer.
            </summary>
            <param name="layerID">Handle for the layer to be removed.<seealso cref="M:GlobeSpotterAPI.API.AddWFSLayer(System.String,System.String,System.String,System.String,System.Drawing.Color)"/></param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <see cref="M:GlobeSpotterAPI.API.AddWFSLayer(System.String,System.String,System.String,System.String,System.Drawing.Color)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetBrightness(System.UInt32)">
            <summary>
            Gets the brightness of a viewer. 
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <returns>A brightness value within the range of [0.1..3.0]</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetBrightness(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetBrightness(System.UInt32,System.Double)">
            <summary>
            Sets the brightness of a viewer.
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <param name="brightness">A brightness value within the range of [0.1..3.0]</param>
            <seealso cref="M:GlobeSpotterAPI.API.GetBrightness(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetOverlayDrawDistance(System.UInt32)">
            <summary>
            Gets the overlay drawing distance of a viewer. 
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <returns>A distance value within the range of [0...200m]</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetOverlayDrawDistance(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetOverlayDrawDistance(System.UInt32,System.Double)">
            <summary>
            Sets the overlay drawing distance of a viewer. This is a bbox around the recording location in meters
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <param name="distance">A distance value within the range of [0...200m]</param>
            <seealso cref="M:GlobeSpotterAPI.API.GetOverlayDrawDistance(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetFocusPoint">
            <summary>
            Gets the the currently set focus point
            </summary>
            <returns>3D focus point</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetOverlayDrawDistance(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetFocusPoint(GlobeSpotterAPI.Point3D)">
            <summary>
            Sets a 3D point to focus on
            </summary>
            <param name="point">A 3D point to focos on</param>
            <seealso cref="M:GlobeSpotterAPI.API.GetOverlayDrawDistance(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetActiveViewer">
            <summary>
            Returns the viewerID that's currently active 
            </summary>
            <returns>Active viewerID</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ShowImageInformation(System.UInt32)">
            <summary>
            Displays the image information window based on the given viewerID
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetActiveViewer(System.UInt32)">
            <summary>
            Sets window active based on viewerID. This can be used to switch between several cyclorama windows. 
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetActiveViewerReplaceMode">
            <summary>
            Returns true if the Active viewer replacement mode is turned on. 
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetActiveViewerReplaceMode(System.Boolean)">
            <summary>
            Sets the Active viewer replacementmode. If set to true, the active viewer will be replaced with new OpenImage or OpenNearestImage requests
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetFocusMode">
            <summary>
            Returns true if the Focus mode (fast measurements) is turned on. 
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetFocusMode(System.Boolean)">
            <summary>
            Sets the Focus mode. Focus mode can be used to link cyclorama's and place measurements in a fast way. Read globespotter user documentation for more details
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetContextMenuEnabled">
            <summary>
            Returns true if the context menus are enabled 
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetContextMenuEnabled(System.Boolean)">
            <summary>
            Set to true if context menus should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerTitleBarVisible">
            <summary>
            the ability to show/hide the title of Cyclorama viewers 
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerTitleBarVisible(System.Boolean)">
            <summary>
            the ability to show/hide the title of Cyclorama viewers
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetTilingEnabled">
            <summary>
            the visibility of the window bars: titleBar, toolBar can be set separately
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerTitleVisible(System.Boolean)">
            <summary>
            the visibility of the window bars: titleBar, toolBar can be set separately
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerTitleVisible">
            <summary>
            In addition to the layout options (horizontal/vertical) the viewers can be tiled automatically, this means that when there are two or more viewers opened they will appear in two rows (horizontal) of columns (vertical)
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetTilingEnabled(System.Boolean)">
            <summary>
            In addition to the layout options (horizontal/vertical) the viewers can be tiled automatically, this means that when there are two or more viewers opened they will appear in two rows (horizontal) of columns (vertical)
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetKeyboardEnabled">
            <summary>
            Returns true if keyboard shortcuts are enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetKeyboardEnabled(System.Boolean)">
            <summary>
            Set to true if keyboard shortcuts should be enabled. See the globespotter user documentation for available keyboard shortcuts
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapEnabled">
            <summary>
            Returns true if the map is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMouseInteractionEnabled">
            <summary>
            Returns true if the mouse interaction is enabled for the viewer camera
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapEnabled(System.Boolean)">
            <summary>
            Set to true if map should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMouseInteractionEnabled(System.Boolean)">
            <summary>
            Enables / disables the mouse interaction for the viewer camera
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetShowMap">
            <summary>
            Returns true if the map is visible
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetShowMap(System.Boolean)">
            <summary>
            Set to true if the map should be visible
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetUseDateRange">
            <summary>
            Returns true if the date range specified by setDateFrom and setDateTo is used
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateTo(System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateFrom(System.String)"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetUseDateRange(System.Boolean)">
            <summary>
            Set to true if the date range specified by setDateFrom and setDateTo should be used
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateTo(System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateFrom(System.String)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAutoMaximizeMap">
            <summary>
            Returns true if the map will be maximized when no cycloramas are openend
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAutoMaximizeMap(System.Boolean)">
            <summary>
            Set to true if map should be maximized when no cycloramas are opened
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetHideOverlaysWhenMeasuring">
            <summary>
            Returns true if the overlays should be hidden when performing measurements
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetHideOverlaysWhenMeasuring(System.Boolean)">
            <summary>
            Set to true if the overlays should be hidden when performing measurements
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerBrightnessEnabled">
            <summary>
            Returns true if brightness slider in cyclorama is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerBrightnessEnabled(System.Boolean)">
            <summary>
            Set to true if brightness slider in cyclorama should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerOverlayDrawDistanceEnabled">
            <summary>
            Returns true if distance slider in cyclorama is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerOverlayDrawDistanceEnabled(System.Boolean)">
            <summary>
            Set to true if distance slider in cyclorama should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerCycleZoomLevelsEnabled">
            <summary>
            Returns true if zoom levels button in cyclorama is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerCycleZoomLevelsEnabled(System.Boolean)">
            <summary>
            Set to true if zoom levels button in cyclorama should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetImageInformationEnabled">
            <summary>
            Returns true if image information button in cyclorama is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetImageInformationEnabled(System.Boolean)">
            <summary>
            Set to true if image information button in cyclorama should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerPrintImageEnabled">
            <summary>
            Returns true if print image button in cyclorama is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerPrintImageEnabled(System.Boolean)">
            <summary>
            Set to true if print image button in cyclorama should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerSaveImageEnabled">
            <summary>
            Returns true if save image button in cyclorama is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerSaveImageEnabled(System.Boolean)">
            <summary>
            Set to true if save image button in cyclorama should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerShowLocationEnabled">
            <summary>
            Returns true if show location on map button is enabled in cyclorama 
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerShowLocationEnabled(System.Boolean)">
            <summary>
            Set to true if show location on map button should be enabled in cyclorama
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetCloseViewerEnabled">
            <summary>
            Returns true if the close button (cross in right upper corner of cyclorama) is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetCloseViewerEnabled(System.Boolean)">
            <summary>
            Set to true if the close button (cross in right upper corner of cyclorama) should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerWindowBorderVisible">
            <summary>
            Returns true if the window border is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerWindowBorderVisible(System.Boolean)">
            <summary>
            Set to true if the window border should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerToolBarVisible">
            <summary>
            Returns true if the button ViewerToolBarVisible in the cyclorama is enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerToolBarVisible(System.Boolean)">
            <summary>
            Set to true if the button ViewerToolBarVisible in the cyclorama should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerCompassVisible">
            <summary>
            Returns true if the compass is visible
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerCompassVisible(System.Boolean)">
            <summary>
            Set to true if the compass should be visible
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerRotationButtonsVisible">
            <summary>
            Returns true if the navigation buttons are enabled. Navigation buttons can be used when in VNC/RDP/Citrix mode
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerRotationButtonsVisible(System.Boolean)">
            <summary>
            Set to true if the navigation buttons should be enabled. Navigation buttons can be used when in VNC/RDP/Citrix mode
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerZoomBoxEnabled">
            <summary>
            Returns true if the ZoomBox in the cyclorama is enabled. The ZoomBox works like a magnifying glass when on a longpress mouseclick 
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerZoomBoxEnabled(System.Boolean)">
            <summary>
            Set to true if the ZoomBox in the cyclorama should be enabled. The ZoomBox works like a magnifying glass when on a longpress mouseclick 
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerOverlayAlphaEnabled">
            <summary>
            Returns true if the vector data alpha slider button is enabled for viewers.
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerOverlayAlphaEnabled(System.Boolean)">
            <summary>
            Enables/disables vector data alpha slider for viewers.
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerDetailImagesVisible">
            <summary>
            Returns true if the detailed images (picture in picture) are enabled
            </summary>
            <returns>True if enabled</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerDetailImagesVisible(System.Boolean)">
            <summary>
            Set to true if the detailed images (picture in picture) should be enabled
            </summary>
            <param name="value">Set to true if functionality should be enabled</param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetDateFrom">
            <summary>
            Returns the date thats currently used for retrieving recordinglocations. Recordinglocations will be loaded using 'DateFrom' until 'DateTo'
            Format is W3CDTF ISO 8601: http://www.w3.org/TR/NOTE-datetime represented as string
            </summary>
            <returns>Date in W3CDTF format</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetDateTo"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateFrom(System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateTo(System.String)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetDateFrom(System.String)">
            <summary>
            Sets the date thats should be used for retrieving recordinglocations. Recordinglocations will be loaded using 'DateFrom' until 'DateTo'
            Format is W3CDTF ISO 8601: http://www.w3.org/TR/NOTE-datetime represented as string
            </summary>
            <param name="date">Date from</param>
            <returns></returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetDateTo"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateTo(System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.GetDateFrom"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetDateTo">
            <summary>
            Returns the date thats currently used for retrieving recordinglocations. Recordinglocations will be loaded using 'DateFrom' until 'DateTo'
            Format is W3CDTF ISO 8601: http://www.w3.org/TR/NOTE-datetime represented as string
            </summary>
            <returns>Date in W3CDTF format</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateTo(System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateFrom(System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.GetDateFrom"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetDateTo(System.String)">
            <summary>
            Sets the date thats should be used for retrieving recordinglocations. Recordinglocations will be loaded using 'DateFrom' until 'DateTo'
            Format is W3CDTF ISO 8601: http://www.w3.org/TR/NOTE-datetime represented as string
            </summary>
            <param name="date">Date to</param>
            <returns></returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetDateTo"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDateFrom(System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.GetDateFrom"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.RotateLeft(System.UInt32,System.Double)">
            <summary>
            Rotate a viewer to the left by a certain angle in degrees.
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <param name="degrees">A rotation value in degrees.</param>
            <seealso cref="M:GlobeSpotterAPI.API.RotateRight(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateUp(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateDown(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.RotateRight(System.UInt32,System.Double)">
            <summary>
            Rotate a viewer to the right by a certain angle in degrees.
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <param name="degrees">A rotation value in degrees.</param>
            <seealso cref="M:GlobeSpotterAPI.API.RotateLeft(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateUp(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateDown(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.RotateUp(System.UInt32,System.Double)">
            <summary>
            Rotate a viewer upwards by a certain angle in degrees.
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <param name="degrees">A rotation value in degrees.</param>
            <seealso cref="M:GlobeSpotterAPI.API.RotateRight(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateLeft(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateDown(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.RotateDown(System.UInt32,System.Double)">
            <summary>
            Rotate a viewer downwards by a certain angle in degrees.
            </summary>
            <param name="viewerID">The id of the viewer.</param>
            <param name="degrees">A rotation value in degrees.</param>
            <seealso cref="M:GlobeSpotterAPI.API.RotateRight(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateUp(System.UInt32,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.RotateLeft(System.UInt32,System.Double)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddGMLLayer(System.String,System.String,System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Add GML as a new layer onto all viewers.
            </summary>
            <param name="name">Name of the layer to be added.</param>
            <param name="gml">Data in GML format as a string.</param>
            <param name="srsName">SRS of de supplied gml/vector data</param>
            <param name="color">Color used when drawing the layer.</param>
            <param name="showInViewer">Set to true if this layer should be visible in panoramic image</param>
            <param name="showInMap">Set to true if this layer should be visible on map (if available)</param>
            <param name="minZoomLevel">Minimum zoomlevel on map when gml data should be visible</param>
            <returns>The layer id.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddGMLLayer(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Add GML as a new layer onto all viewers.
            </summary>
            <param name="name">Name of the layer to be added.</param>
            <param name="srsName">SRS of de supplied gml/vector data</param>
            <param name="gml">Data in GML format as a string.</param>
            <param name="sld">SLD / style to be used when drawing the vector data</param>
            <param name="showInViewer">Set to true if this layer should be visible in panoramic image</param>
            <param name="showInMap">Set to true if this layer should be visible on map (if available)</param>
            <param name="minZoomLevel">Minimum zoomlevel on map when gml data should be visible</param>
            <returns>The layer id.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddGMLLayer(System.String,System.String,System.String,System.Drawing.Color)">
            <summary>
            Add GML as a new layer onto all viewers.
            </summary>
            <param name="name">Name of the layer to be added.</param>
            <param name="srsName">SRS of de supplied gml/vector data</param>
            <param name="gml">Data in GML format as a string.</param>
            <param name="color">Color used when drawing the layer.</param>
            <returns>The layer id.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddGMLLayer(System.String,System.String,System.String,System.String)">
            <summary>
            Add GML as a new layer onto all viewers.
            </summary>
            <param name="name">Name of the layer to be added.</param>
            <param name="srsName">SRS of de supplied gml/vector data</param>
            <param name="gml">Data in GML format as an string</param>
            <param name="sld">SLD / style to be used when drawing the vectordata</param>
            <returns>The layer id.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetDrawingMode(GlobeSpotterAPI.DrawingMode)">
            <summary>
            Sets the drawing mode. The drawing mode determines the form of the drawing.
            </summary>
            <param name="mode">Drawing mode</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <see cref="T:GlobeSpotterAPI.DrawingMode"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double)">
            <summary>
            Draws a marker at pixel x,y in a viewer.
            </summary>
            <param name="viewerID">The viewer id.</param>
            <param name="x">X coordinate of the pixel location.</param>
            <param name="y">Y coordinate of the pixel location.</param>
            <returns>ID of the added drawing.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ClearMarker(System.UInt32,System.UInt32)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDrawingLayerVisible(System.Boolean)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double,System.String)">
            <summary>
            Draws a marker at pixel x,y in a viewer.
            </summary>
            <param name="viewerID">The viewer id.</param>
            <param name="x">X coordinate of the pixel location.</param>
            <param name="y">Y coordinate of the pixel location.</param>
            <param name="label">Label for the marker.</param>
            <returns>ID of the added drawing.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ClearMarker(System.UInt32,System.UInt32)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDrawingLayerVisible(System.Boolean)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double)">
            <summary>
            Draws a marker at position h,v in a viewer.
            </summary>
            <param name="viewerID">The viewer id.</param>
            <param name="h">Horizontal direction in degrees.</param>
            <param name="v">Vertical direction in degrees.</param>
            <returns>ID of the added drawing.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ClearMarker(System.UInt32,System.UInt32)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDrawingLayerVisible(System.Boolean)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double,System.String)">
            <summary>
            Draws a marker at position h,v in a viewer.
            </summary>
            <param name="viewerID">The viewer id.</param>
            <param name="h">Horizontal direction in degrees.</param>
            <param name="v">Vertical direction in degrees.</param>
            <param name="label">Label for the marker.</param>
            <returns>ID of the added drawing.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ClearMarker(System.UInt32,System.UInt32)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDrawingLayerVisible(System.Boolean)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Draws a marker in direction x,y,z in a viewer.
            </summary>
            <param name="viewerID">ID of the viewer to draw the marker in.</param>
            <param name="x">X component of the direction.</param>
            <param name="y">Y component of the direction.</param>
            <param name="z">Z component of the direction.</param>
            <returns>ID of the added drawing.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ClearMarker(System.UInt32,System.UInt32)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDrawingLayerVisible(System.Boolean)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Draws a marker in direction x,y,z in a viewer.
            </summary>
            <param name="viewerID">ID of the viewer to draw the marker in.</param>
            <param name="x">X component of the direction.</param>
            <param name="y">Y component of the direction.</param>
            <param name="z">Z component of the direction.</param>
            <param name="label">Label for the marker.</param>
            <returns>ID of the added drawing.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ClearMarker(System.UInt32,System.UInt32)"/>
            <seealso cref="M:GlobeSpotterAPI.API.SetDrawingLayerVisible(System.Boolean)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ClearMarker(System.UInt32,System.UInt32)">
            <summary>
            Removes a drawing from a viewer.
            </summary>
            <param name="viewerID">The ID of the viewer to remove the drawing from.</param>
            <param name="drawingID">The ID of the drawing to be removed.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ClearMarkers(System.UInt32)">
            <summary>
            Removes all drawings from a viewer.
            </summary>
            <param name="viewerID">he ID of the viewer to remove the drawings from.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMarkerImageURL(System.String)">
            <summary>
            Sets the image url used for drawing.
            </summary>
            <param name="imageURL">The URL to a small PNG, GIF or JPEG image.</param>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double,System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double,System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double,System.String)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMarkerColor(System.Drawing.Color)">
            <summary>
            Sets the color used for drawing.
            </summary>
            <param name="color">The color.</param>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double,System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double,System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double,System.String)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMarkerSize(System.Double)">
            <summary>
            Sets the size used for drawing.
            </summary>
            <param name="size">The size of the drawing in pixels.</param>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtXY(System.UInt32,System.Double,System.Double,System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerAtHV(System.UInt32,System.Double,System.Double,System.String)"/>
            <seealso cref="M:GlobeSpotterAPI.API.DrawMarkerInDirection(System.UInt32,System.Double,System.Double,System.Double,System.String)"/>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddHeightEntity(System.String,System.Double,GlobeSpotterAPI.Point3D)">
            <summary>
            Adds a height entity to the list of entities, which can be used for measuring the height and/or position of an object.
            </summary>
            <param name="name">Name of the measurement entity.</param>
            <param name="height">Height of the measurement entity.</param>
            <param name="point">A 3D position referenced in the coordinate system as used by the API. Object height is measured relative to this position. </param>
            <returns>An id by which to reference the measurement entity.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddAreaEntity(System.String,System.Double,GlobeSpotterAPI.Point2D,GlobeSpotterAPI.Point2D,System.Double)">
            <summary>
            Adds an area entity to the list of entities, which can be used for measuring the height, width and/or
            area of an object.
            </summary>
            <param name="name">Name of the measurement entity.</param>
            <param name="height">Height of the measurement entity.</param>
            <param name="point1">A 2D position referenced in the coordinate system as used by the API.</param>
            <param name="point2">A 2D position referenced in the coordinate system as used by the API.</param>
            <param name="z">Object height is measured relative to this value.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddVolumeEntity(System.String,System.Double,System.Collections.Generic.List{GlobeSpotterAPI.Point2D},System.Double)">
            <summary>
            Adds a volume entity to the list of entities, which can be used for measuring the height, ground area,
            volume and/or perimeter of an object.
            </summary>
            <param name="name">Name of the measurement entity.</param>
            <param name="height">Height of the measurement entity.</param>
            <param name="points">An array of 2D positions referenced in the coordinate system as used by the API.</param>
            <param name="z">Object height is measured relative to this value.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetEntityName(System.Int32)">
            <summary>
            Gets the name of a referenced entity.
            </summary>
            <param name="entityID">A reference to an entity.</param>
            <returns>The name of the referenced entity.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetEntityDescription(System.Int32,System.String)">
            <summary>
            Gets the description of a referenced entity.
            </summary>
            <param name="entityID">A reference to an entity.</param>
            <param name="description">A description of the entity or something referenced by the entity.</param>
            <returns>The description of the referenced entity.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetEntityDescription(System.Int32)">
            <summary>
            Gets the description of a referenced entity.
            </summary>
            <param name="entityID">A reference to an entity.</param>
            <returns>The description of the referenced entity.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetEntityData(System.Int32)">
            <summary>
            Get the data object associated with an entity. The data of the object depends on the entity referenced.
            </summary>
            <param name="entityID">A reference to an entity.</param>
            <returns>The data object.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetFocusEntity">
            <summary>
            This function is used to ascertain which entity has focus. An entity that has focus is shown 
            in color while the others are only shown in shades of gray.
            </summary>
            <returns>The ID of the entity which currently has focus, or -1 if no entity has focus.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetFocusEntity(System.Int32)">
            <summary>
            This function is used to give a particular entity focus. An entity that has focus is shown in
            color while the others are only shown in shades of gray.
            </summary>
            <param name="entityID">The ID of an entity.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.RemoveEntity(System.Int32)">
            <summary>
            Removes an entity.
            </summary>
            <param name="entityID">The entity id.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.RemoveAllEntities">
            <summary>
            Remove all entities from the application.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetLanguageLocale">
            <summary>
            Get the language locale used by the API.
            </summary>
            <returns>The locale of a language.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetLanguageLocale(System.String)">
            <summary>
            Set the language locale to be used by the API.
            </summary>
            <seealso cref="M:GlobeSpotterAPI.API.GetSupportedLanguageLocales"/>
            <param name="locale">The locale of a language.</param>
            <returns>If the locale is supported.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetSupportedLanguageLocales">
            <summary>
            Get the supported language locales of the API.
            </summary>
            <returns>A list of supported language locales.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetSupportedAddressDatabases">
            <summary>
            Get the supported address databases of the API.
            </summary>
            <returns>A list of supported address databases.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewshot(System.UInt32)">
            <summary>
            Grabs a 'screenshot' from a single viewer. Deprecated. Use GetViewerScreenshot.
            </summary>
            <param name="viewer">The viewer that the viewshot is taken from.</param>
            <returns>A Bitmap repressenting the viewshot.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the image could not be reconstructed.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerScreenshot(System.UInt32)">
            <summary>
            Grabs a 'screenshot' from a single viewer.
            </summary>
            <param name="viewer">The viewer that the viewshot is taken from.</param>
            <returns>A Bitmap repressenting the viewshot.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the image could not be reconstructed.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ZoomViewerToMaxLevel(System.UInt32)">
            <summary>
            Sets the referenced viewer to its maximum zoom level.
            </summary>
            <param name="viewer">An id that references a viewer.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ZoomViewerToMedLevel(System.UInt32)">
            <summary>
            Sets the referenced viewer to an intermediate zoom level.
            </summary>
            <param name="viewer">An id that references a viewer.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ZoomViewerToMinLevel(System.UInt32)">
            <summary>
            Sets the referenced viewer to its minimum zoom level.
            </summary>
            <param name="viewer">An id that references a viewer.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ShowViewerSaveDialog(System.UInt32)">
            <summary>
            Shows the used a save-dialog for a viewer, in order to save the image of the specified viewer to disk.
            </summary>
            <param name="viewer">The viewer of which the image will be saved.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ShowViewerPrintDialog(System.UInt32)">
            <summary>
            Shows the user a print-dialog for a viewer, in order to print the image of the specified viewer.
            </summary>
            <param name="viewer">The viewer of which the image will be printed.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.ShowViewerLocationOnMap(System.UInt32)">
            <summary>
            Centers the map on the viewer and indicates its location highlighting it.
            </summary>
            <param name="viewer">The viewer of which the map should be centered on</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetTID(System.String)">
            <summary>
            Sets the current TID to be used for authorization
            </summary>
            <param name="TID">The temporary identification string</param>
            
        </member>
        <member name="M:GlobeSpotterAPI.API.CloseImage(System.UInt32)">
            <summary>
            Remove a viewer from the MDI canvas using a viewer id.
            </summary>
            <param name="viewerID">The id of a viewer.</param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMaxViewers(System.UInt32)">
            <summary>
            Sets the maximum amount of viewers bounded by [1..MAX_VIEWERS].
            </summary>
            <param name="max">The maximum number of viewers.</param>
            <returns>The bounded maximum number of viewers.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMaxViewers">
            <summary>
            Get the maximum number of viewers that can be opened by the MDI canvas.
            </summary>
            <returns>The maximum number of viewers.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerCount">
            <summary>
            Get the number of viewers currently opened within the MDI canvas.
            </summary>
            <returns>The number of viewers opened.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerBorderColor(System.UInt32)">
            <summary>
            Gets the color associated with the specified viewer window. The window colors provide a 
            visual reference between opened location features on the map and its respective viewer window.
            </summary>
            <param name="viewerID">The ID of the viewer.</param>
            <returns>The color associated with a viewer window.</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerBorderColorScheme(System.Drawing.Color[])">
            <summary>
            Sets the color associated with the specified viewer window. The window colors provide a 
            visual reference between opened location features on the map and its respective viewer window.
            </summary>
            <param name="colorScheme">color to be set</param>        
            <returns>The color associated with a viewer window.</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerBorderColorScheme">
            <summary>
            Returns the current color scheme used for drawing viewer borders.
            </summary>
            <returns>
            ColorScheme
            </returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.getRecordingLocationColorFromDate(System.String)">
            <summary>
            Returns the recording location color that is associated with the date parameter within the GlobeSpotter API.
            </summary>
            <returns>
            Color
            </returns>
            <param name="date">
            An ISO 8601 DateTime string indicating all recordings newer than specified date
            </param>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetWindowingMode">
            <summary>
            Returns the current windowing mode. 
            1 = Horizontal layout of cyclorama windows 
            2 = vertical layout of cyclorama windows 
            </summary>
            <returns>
            1 = Horizontal layout of cyclorama windows 
            2 = vertical layout of cyclorama windows 
            </returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetWindowingMode(GlobeSpotterAPI.MDIWindowingMode)">
            <summary>
            Sets the windowing mode.
            1 = Horizontal layout of cyclorama windows 
            2 = vertical layout of cyclorama windows 
            </summary>
            <param name="windowingMode">
            1 = Horizontal layout of cyclorama windows 
            2 = vertical layout of cyclorama windows 
            </param>
            <returns></returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddPointMeasurement(System.String)">
            <summary>
            Start point measurement. After this function is called, the user can click in at least two cyclorama windows to perform a measurement
            </summary>        
            <returns>EntityID</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddLineMeasurement(System.String)">
            <summary>
            Start line measurement. After this function is called, the user can click in at least two cyclorama windows to perform a measurement
            </summary>        
            <returns>EntityID</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddSurfaceMeasurement(System.String)">
            <summary>
            Start surface measurement. After this function is called, the user can click in at least two cyclorama windows to perform a measurement
            </summary>        
            <returns>EntityID</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.OpenMeasurement(System.Int32)">
            <summary>
            Opens an existing measurement for editing.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.CloseMeasurement(System.Int32)">
            <summary>
            Finish measurement. After calling this function, the measurement will be closed.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.CancelMeasurement(System.Int32)">
            <summary>
            Cancels measurement. After calling this function, the measurement cannot be changed anymore. All changes will be lost
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementDirectionEnabled(System.Int32)">
            <summary>
            Returns true if the direction indicator (arrow) is enabled  for the specified measurement. false if disabled
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementDirectionEnabled(System.Int32,System.Boolean)">
            <summary>
            Enables/disabled the direction indicator for the specified measurement.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementDirection(System.Int32)">
            <summary>
            Returns the rotation of the direction indicator for the specified measurement (in degrees)
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementDirection(System.Int32,System.Int32)">
            <summary>
            Sets the value of the direction indicator (in degrees, 0 - 360)
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementExtrusionEnabled(System.Int32)">
            <summary>
            Returns true if the extrusion (volume) for the surface measurement is enabled.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementExtrusionEnabled(System.Int32,System.Boolean)">
            <summary>
            Enables/disabled the extrusion (volume) for the specified surface measurement.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementExtrusion(System.Int32)">
            <summary>
            Returns the extrusion value for the specified surface measurement
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementExtrusion(System.Int32,System.Single)">
            <summary>
            Sets the extrusion value of the specified surface measurement
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.CreateMeasurementPoint(System.Int32,GlobeSpotterAPI.Point3D)">
            <summary>
            Adds a x,y,z point to an existing measurement. This point can be modified later using OpenMeasurementPoint.
            This makes it possible to change geometries from for example shape files.
            </summary>        
            <returns>Point ID</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddMeasurementPoint(System.Int32)">
            <summary>
            Add a new point to an existing measurement. After calling this function, the user interface will be prepared to start a point measurement that will be added
            to the existing measurement (to create line, multi line or surface)
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.RemoveMeasurementPoint(System.Int32,System.Int32)">
            <summary>
            Removes point from existing entity
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.OpenMeasurementPoint(System.Int32,System.Int32)">
            <summary>
            Opens Point in existing measurement (to add more observations). After calling this function, the GUI will be prepared to add more observations.
            When finished, CloseMeasurementPoint should be called
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.CloseMeasurementPoint(System.Int32,System.Int32)">
            <summary>
            Closes a open point measurement. After calling this function, the newly measured point will be added to the measurement (line, polygon, etc)
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.MoveMeasurementPointToIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            moved the specified point to the specified index for the specified measurement
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointIndex(System.Int32,System.Int32)">
            <summary>
            Returns the index of the specified point in the specified measurement
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.RemoveMeasurementPointObservation(System.Int32,System.Int32,System.String)">
            <summary>
            Removes a observation from a specified point
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementIDs">
            <summary>
            Returns the list of available/measured measurements
            </summary>
            <returns>none</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointIDs(System.Int32)">
            <summary>
            Returns the pointsIDs in a given measurement
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointObservationImageIDs(System.Int32,System.Int32)">
            <summary>
            Returns the observations in the specified PointID
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointData(System.Int32,System.Int32)">
            <summary>
            Returns the point data for the specified PointID
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointObservationData(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the observation data in the specified PointID with specified ImageID
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementSeriesModeEnabled">
            <summary>
            Returns true if the measurement sersies mode is enabled. False otherwise.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementSeriesModeEnabled(System.Boolean)">
            <summary>
            Enables/disabled the measurement sersies mode
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.ResetMeasurementSeries(System.Int32)">
            <summary>
            Resets measurement series for specified measurement
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.NextMeasurementSeries(System.Int32)">
            <summary>
            When this function is called the API will start a new series measurement for the specified measurement
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementDistancesVisible">
            <summary>
            Returns true if distance is visible as textlabel on measurements
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementDistancesVisible(System.Boolean)">
            <summary>
            Enables/disables distances as textlabel on measurements
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementAnglesVisible">
            <summary>
            Returns true if the measurement sersies mode is enabled. False otherwise.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementAnglesVisible(System.Boolean)">
            <summary>
            Enables/disabled the measurement sersies mode
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementSlopesVisible">
            <summary>
            Returns true if the measurement slope testlabels are visible. Returns false if not visible.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementSlopesVisible(System.Boolean)">
            <summary>
            Enables/disables the measurement slope textlabels
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementAreaVisible">
            <summary>
            Returns true if the area textlabels on surface measurements are visible. False if disabled.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementAreaVisible(System.Boolean)">
            <summary>
            Enables/disables area textlabels on surface measurements
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapRotationEnabled">
            <summary>
            Returns true if the map rotation is enabled. False if disabled
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapRotationEnabled(System.Boolean)">
            <summary>
            Enables/disables the map rotation
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapCoordinateInfoVisible">
            <summary>
            Returns true coordinate information is visible on the map
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapCoordinateInfoVisible(System.Boolean)">
            <summary>
            Enables/disables coordinate information on the map
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapOverlayAlpha">
            <summary>
            Returns the value for the alpha value of map overlays
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapOverlayAlpha(System.Double)">
            <summary>
            Sets the alpha value of map overlays
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetOverlayAlpha(System.Int32)">
            <summary>
            Returns the alpha overlay value for a specific viewer
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetOverlayAlpha(System.Int32,System.Double)">
            <summary>
            Sets the alpha overlay value for a specific viewer
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapToolBarButtonsVisible">
            <summary>
            Returns true if map tool bar buttons are visible
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapToolBarButtonsVisible(System.Boolean)">
            <summary>
            Enables/disables the map toolbar buttons
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerRotationEnabled">
            <summary>
            Returns true if viewer rotation is enabled (compass)
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerRotationEnabled(System.Boolean)">
            <summary>
            Enables/disables viewer rotation (compass)
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetViewerToolBarButtonsVisible">
            <summary>
            Returns true if viewer toolbar buttons are visible
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetViewerToolBarButtonsVisible(System.Boolean)">
            <summary>
            Enables/disables viewer toolbar buttons
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetSwapViewersEnabled">
            <summary>
            Returns true if viewer swap buttons are enabled
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetSwapViewersEnabled(System.Boolean)">
            <summary>
            Enables/disables viewer swap buttons
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetDividerDrag">
            <summary>
            Returns true if the divider drag between map and cyclorama windows is enabled
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetDividerDrag(System.Boolean)">
            <summary>
            Enables/disabled the divider drag between map and cyclorama windows
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetDividerPosition">
            <summary>
            Returns the divider (between map and cycloramas) position in pixels
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetDividerPosition(System.Double)">
            <summary>
            Sets the divider (between map and cycloramas) position
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetGlobalViewerBrightness(System.Double)">
            <summary>
            Sets the brightness value for all cyclorama windows
            </summary>
            <param name="brightness">The maximum number of viewers.</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetGlobalViewerBrightness">
            <summary>
            Returns the global brightness settings (for all cyclorama windows)
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetGlobalViewerOverlayAlpha(System.Double)">
            <summary>
            Sets the alpha value for all cyclorama windows
            </summary>
            <param name="alpha">The maximum number of viewers.</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetGlobalViewerOverlayAlpha">
            <summary>
            Returns the global alpha setting (for all cyclorama windows)
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetGlobalViewerOverlayDrawDistance(System.Double)">
            <summary>
            Sets the overlay draw distance (in meters)  for all cyclorama windows
            </summary>
            <param name="distance">The maximum number of viewers.</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetGlobalViewerOverlayDrawDistance">
            <summary>
            Returns the overlay draw distance (in meters) for all viewers
            </summary>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetBaseLayerOSM(System.String,System.UInt32,System.String,GlobeSpotterAPI.OSMLayer,System.Boolean)">
            <summary>
            Sets the baselayer of a map
            </summary>
            <param name="name">Name of this layer (may be anything).</param>
            <param name="type">URL of the WMS-service.</param>
            <param name="srsName">The name(s) of the layer(s) to be retrieved.</param>
            <param name="layer">Supported WMS version.</param>
            <param name="useProxy">Wether the layer needs to be transparent or not.</param>
            <returns>nothing</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetBaseLayerWMS(System.String,System.UInt32,System.String,GlobeSpotterAPI.WMSLayer,System.Boolean)">
            <summary>
            Sets the baselayer of a map
            </summary>
            <param name="name">Name of this layer (may be anything).</param>
            <param name="type">URL of the WMS-service.</param>
            <param name="srsName">The name(s) of the layer(s) to be retrieved.</param>
            <param name="layer">Supported WMS version.</param>
            <param name="useProxy">Wether the layer needs to be transparent or not.</param>
            <returns>nothing</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddWMSLayer(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Adds a WMS-layer to the map.
            </summary>
            <param name="name">Name of this layer (may be anything).</param>
            <param name="url">URL of the WMS-service.</param>
            <param name="layers">The name(s) of the layer(s) to be retrieved.</param>
            <param name="version">Supported WMS version.</param>
            <param name="transparent">Wether the layer needs to be transparent or not.</param>
            <param name="tiled">Wether the layer needs to be tiled or not.</param>
            <param name="maxZoomLevel">Maximum zoomlevel on map</param>
            <returns>An ID of the layer to be used when removing the layer.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.AddWMSLayer(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Adds a WMS-layer to the map.
            </summary>
            <param name="name">Name of this layer (may be anything).</param>
            <param name="url">URL of the WMS-service.</param>
            <param name="layers">The name(s) of the layer(s) to be retrieved.</param>
            <param name="version">Supported WMS version.</param>
            <param name="transparent">Wether the layer needs to be transparent or not.</param>
            <param name="tiled">Wether the layer needs to be tiled or not.</param>
            <param name="maxZoomLevel"> </param>
            <param name="minZoomLevel"> </param>
            <param name="bgColor"> </param>
            <param name="useProxy"> </param>
            <param name="getFeatureInfo"> </param>
            <returns>An ID of the layer to be used when removing the layer.</returns>
            <seealso cref="M:GlobeSpotterAPI.API.RemoveLayer(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapCenter">
            <summary>
            Gets current map center
            </summary>
            <returns>Point2D with x and y representing center of map</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapCenter(GlobeSpotterAPI.Point2D)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapCenter(GlobeSpotterAPI.Point2D)">
            <summary>
            Sets current center of map.
            </summary>
            <param name="p">Center of map as Point2D</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapCenter"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapClickMode(GlobeSpotterAPI.MapClickMode)">
            <summary>
            Sets map click mode
            </summary>
            <param name="mode">Mode of click</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapClickMode"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapClickMode">
            <summary>
            Gets current map center
            </summary>
            <returns>Current map click mode</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapClickMode(GlobeSpotterAPI.MapClickMode)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapExtent(GlobeSpotterAPI.MapExtent)">
            <summary>
            Sets map extent
            </summary>
            <param name="extent">Map extent with left, bottom, right,top</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapExtent"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapExtent">
            <summary>
            Gets map extent
            </summary>
            <returns>MapExtent</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapExtent(GlobeSpotterAPI.MapExtent)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapZoom(System.UInt32)">
            <summary>
            Sets current map zoomlevel
            </summary>
            <param name="zoomLevel">Map zoomlevel</param>
            <returns>none</returns>
            <seealso cref="F:GlobeSpotterAPI.API.fGetMapZoom"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapZoom">
            <summary>
            Gets current map zoomlevel
            </summary>
            <returns>Map zoomlevel</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapZoom(System.UInt32)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.ShowMapPrintDialog">
            <summary>
            Shows map image print dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.ShowMapSaveDialog">
            <summary>
            Shows map image save dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapScreenshot">
            <summary>
            Grabs a 'screenshot' from  the map
            </summary>
            <returns>A Bitmap repressenting the viewshot.</returns>
            <exception cref="T:GlobeSpotterAPI.GlobeSpotterAPIException">In most cases indicates that the arguments where inapliccable.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the API was not ready.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the image could not be reconstructed.</exception>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapRotation(System.Double)">
            <summary>
            Sets map rotation in degrees
            </summary>
            <param name="rotation">0 - 360 degrees</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapRotation"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapRotation">
            <summary>
            Gets map rotation in degrees
            </summary>
            <returns>map rotation 0 - 360 degrees</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapRotation(System.Double)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.ZoomMapToMaxLevel">
            <summary>
            Zooms to maximum map zoom level
            </summary>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ZoomMapToFeatureLevel"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.ZoomMapToFeatureLevel">
            <summary>
            Zooms to feature zoom level on map
            </summary>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ZoomMapToMinLevel"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.ZoomMapToMinLevel">
            <summary>
            Zooms to minimum map zoom level 
            </summary>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.ZoomMapToFeatureLevel"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapCompassVisible(System.Boolean)">
            <summary>
            Enables/disables compass for the map
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapCompassVisible"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapCompassVisible">
            <summary>
            Returns true if map compass is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapCompassVisible(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapCycleZoomLevelsEnabled(System.Boolean)">
            <summary>
            Enables/disables Cycle zoom level button 
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapCycleZoomLevelsEnabled"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapCycleZoomLevelsEnabled">
            <summary>
            Returns true if cycle zoom level button is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapCycleZoomLevelsEnabled(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapPrintImageEnabled(System.Boolean)">
            <summary>
            Enables/disables map print image button
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapPrintImageEnabled"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapPrintImageEnabled">
            <summary>
            Returns true if map print image button is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapPrintImageEnabled(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapSaveImageEnabled(System.Boolean)">
            <summary>
            Enables/disables map save image button
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapSaveImageEnabled"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapSaveImageEnabled">
            <summary>
            Returns true if map save image button is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapSaveImageEnabled(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapScaleLineVisible(System.Boolean)">
            <summary>
            Enables/disables map scale line
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapScaleLineVisible"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapScaleLineVisible">
            <summary>
            Returns true if map scale line is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapScaleLineVisible(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapTitleBarVisible(System.Boolean)">
            <summary>
            Enables/disables map title bar
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapTitleBarVisible"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapTitleBarVisible">
            <summary>
            Returns true if map title bar is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapTitleBarVisible(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapTitleVisible(System.Boolean)">
            <summary>
            Enables/disables map title
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapTitleVisible"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapTitleVisible">
            <summary>
            Returns true if map title is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapTitleVisible(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapToolBarVisible(System.Boolean)">
            <summary>
            Enables/disables map toolbar
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapToolBarVisible"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapToolBarVisible">
            <summary>
            Returns true if map toolbar is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapToolBarVisible(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapWindowBorderVisible(System.Boolean)">
            <summary>
            Enables/disables map window border
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapWindowBorderVisible"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapWindowBorderVisible">
            <summary>
            Returns true if map window border is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapWindowBorderVisible(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapZoomControlVisible(System.Boolean)">
            <summary>
            Enables/disables map zoom control
            </summary>
            <param name="enabled">true if functionality should be enabled</param>
            <returns>none</returns>
            <seealso cref="M:GlobeSpotterAPI.API.GetMapZoomControlVisible"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapZoomControlVisible">
            <summary>
            Returns true if map zoom control is enabled/visible
            </summary>
            <returns>true if functionality is enabled/visible</returns>
            <seealso cref="M:GlobeSpotterAPI.API.SetMapZoomControlVisible(System.Boolean)"/>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAddressDatabase">
            <summary>
            Returns the database used for address related image searches.
            </summary>
            <returns>The name of the database (‘cyclomedia’ or ‘navteq’ are supported)</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAddressDatabase(System.String)">
            <summary>
            Sets the database to be used for address lookups.
            The name can either be ‘cyclomedia’ (for supported countries) or ‘navteq’ (worldwide).
            </summary>
            <param name="name">The name of the database</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetDateFormat">
            <summary>
            Returns the current format used for date visualisation.
            </summary>
            <returns>The format of the date</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetDateFormat(System.String)">
            <summary>
            Sets the current format used for date visualisation.
            </summary>
            <param name="format">The format of the date</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetTimeFormat">
            <summary>
            Returns the current format used for time visualisation.
            </summary>
            <returns>The format of the time</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetTimeFormat(System.String)">
            <summary>
            Sets the current format used for time visualisation.
            </summary>
            <param name="format">The format of the time</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.AutoComplete(System.String)">
            <summary>
            Add string to the address service, the address service can now return the matches
            </summary>
            <param name="request">The request string</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.getMeasurementSmartClickModeEnabled">
            <summary>
            Returns true if the observation of a measurementPoint lead to a request to the smart click service
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementSmartClickModeEnabled(System.Boolean)">
            <summary>
            Enables/disables if the observation of a measurementPoint lead to a request to the smart click service
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetObliqueModeEnabled">
            <summary>
            Returns true if the oblique mode is enabled
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetObliqueModeEnabled(System.Boolean)">
            <summary>
            Enables/disables the oblique mode
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapObliqueDirectionsEnabled">
            <summary>
            Returns true if the oblique directions are enabled
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetLengthUnitLabel">
            <summary>
            Returns the unit label of the length
            </summary>
            <returns>the unit label of length</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetLengthUnitFactor">
            <summary>
            Returns the unit factor length
            </summary>
            <returns>the unit factor of length</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetLengthUnitPrecision">
            <summary>
            Returns the unit precision of the length
            </summary>
            <returns>the unit precision of length</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAreaUnitLabel">
            <summary>
            Returns the unit label of the area
            </summary>
            <returns>the unit label of area</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAreaUnitFactor">
            <summary>
            Returns the unit factor area
            </summary>
            <returns>the unit factor of area</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetAreaUnitPrecision">
            <summary>
            Returns the unit precision of the area
            </summary>
            <returns>the unit precision of area</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetVolumeUnitLabel">
            <summary>
            Returns the unit label of the volume
            </summary>
            <returns>the unit label of volume</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetVolumeUnitFactor">
            <summary>
            Returns the unit factor volume
            </summary>
            <returns>the unit factor of volume</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetVolumeUnitPrecision">
            <summary>
            Returns the unit precision of the volume
            </summary>
            <returns>the unit precision of volume</returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetLengthUnitLabel(System.String)">
            <summary>
            Returns the unit label of the length
            </summary>
            <param name="label">The unit label of length</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetLengthUnitFactor(System.Double)">
            <summary>
            Returns the unit factor length
            </summary>
            <param name="factor">The unit factor of length</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetLengthUnitPrecision(System.Double)">
            <summary>
            Returns the unit precision of the length
            </summary>
            <param name="precision">The unit precision of length</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAreaUnitLabel(System.String)">
            <summary>
            Returns the unit label of the area
            </summary>
            <param name="label">The unit label of area</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAreaUnitFactor(System.Double)">
            <summary>
            Returns the unit factor area
            </summary>
            <param name="factor">The unit factor of area</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetAreaUnitPrecision(System.Double)">
            <summary>
            Returns the unit precision of the area
            </summary>
            <param name="precision">The unit precision of area</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetVolumeUnitLabel(System.String)">
            <summary>
            Returns the unit label of the volume
            </summary>
            <param name="label">The unit label of volume</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetVolumeUnitFactor(System.Double)">
            <summary>
            Returns the unit factor volume
            </summary>
            <param name="factor">The unit factor of volume</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetVolumeUnitPrecision(System.Double)">
            <summary>
            Returns the unit precision of the volume
            </summary>
            <param name="precision">The unit precision of volume</param>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapObliqueDirectionsEnabled(System.Boolean)">
            <summary>
            Enables/disables the oblique directions
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapObliqueToggleVisible">
            <summary>
            Returns true if the oblique toggle is visible
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapObliqueToggleVisible(System.Boolean)">
            <summary>
            Enables/disables if the oblique toggle
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementVerticalHeightEnabled(System.Int32,System.Boolean)">
            <summary>
            Set measurement vertical height enabled
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <param name="enabled">enabled / disabled</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementVerticalHeightEnabled(System.Int32)">
            <summary>
            get the measurement height enabled
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementVerticalHeightLevel(System.Int32,System.Double)">
            <summary>
            Set measurement vertical height enabled
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <param name="level">The height level</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementVerticalHeightLevel(System.Int32)">
            <summary>
            get the measurement vertical height level
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementPointVerticalHeightEnabled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set measurement point vertical height enabled
            </summary>
            <param name="entityID">The entityId of the measurement point</param>
            <param name="pointID">The pointId of the measurement point</param>
            <param name="enabled">enabled / disabled</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointVerticalHeightEnabled(System.Int32,System.Int32)">
            <summary>
            get the measurement height enabled
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <param name="pointID">The pointId of the measurement point</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementPointVerticalHeightLevel(System.Int32,System.Int32,System.Double)">
            <summary>
            Set measurement vertical height enabled
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <param name="pointID">The pointId of the measurement</param>
            <param name="level">The height level</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointVerticalHeightLevel(System.Int32,System.Int32)">
            <summary>
            get the measurement vertical height level
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <param name="pointID">The pointId of the measurement</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementPointVerticalHeight(System.Int32,System.Int32)">
            <summary>
            get the measurement point vertical height
            </summary>
            <param name="entityID">The entityId of the measurement</param>
            <param name="pointID">The pointId of the measurement</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMeasurementDistancesBetweenMeasurementsEnabled(System.Boolean)">
            <summary>
            Set measurement distance between measurements enabled
            </summary>
            <param name="enabled">enabled / disabled</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMeasurementDistancesBetweenMeasurementsEnabled">
            <summary>
            get the measurement distance between measurements
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapBrightnessEnabled(System.Boolean)">
            <summary>
            set map brightnes enabled
            </summary>
            <param name="enabled">enabled / disabled</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapBrightnessEnabled">
            <summary>
            get map brightnes enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapContrastEnabled(System.Boolean)">
            <summary>
            set map contrast enabled
            </summary>
            <param name="enabled">enabled / disabled</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapContrastEnabled">
            <summary>
            get map constrast enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapBrightness(System.Double)">
            <summary>
            set map brightnes
            </summary>
            <param name="value">value of brightnes</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapBrightness">
            <summary>
            get map brightnes
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.SetMapContrast(System.Double)">
            <summary>
            set map contrast
            </summary>
            <param name="value">contrast value</param>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.GetMapContrast">
            <summary>
            get map constrast
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.ObliqueViewFromBehind">
            <summary>
            Choose the image 180 degrees from the current image
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.obliqueViewFromLeft">
            <summary>
            Choose the image -90 degrees from the current image
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GlobeSpotterAPI.API.obliqueViewFromRight">
            <summary>
            Choose the image 90 degrees from the current image
            </summary>        
            <returns></returns>
        </member>
        <member name="P:GlobeSpotterAPI.API.gui">
            <summary>
            A GUI-element that can be added to a window or element thereof (wraps the GlobeSpotter-object).
            </summary>
        </member>
    </members>
</doc>
